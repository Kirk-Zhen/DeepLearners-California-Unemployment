{"cells":[{"cell_type":"markdown","metadata":{"id":"WDsekr3LC_kS"},"source":["# Imports"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"iHBsmv9lC6Hs","executionInfo":{"status":"ok","timestamp":1668812524619,"user_tz":360,"elapsed":3294,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from tqdm import tqdm\n","from sklearn.preprocessing import OneHotEncoder\n","import os\n","import pickle\n","from google.colab import drive\n","#!pip install --upgrade gupload\n","#!pip install --upgrade gdown\n","import gdown\n","from pydrive.auth import GoogleAuth\n","from google.colab import auth\n","import torch\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","metadata":{"id":"uSA1jr86DDjC"},"source":["# Download and Load Data"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"YWryq-87DEjU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668812526307,"user_tz":360,"elapsed":1690,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"}},"outputId":"1a4923ed-0cc7-4a99-ff23-6288c2ab107d"},"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading...\n","From: https://drive.google.com/uc?id=1JJGyHi4w4kFUQumxAyixc2zHJfBR0LXU\n","To: /content/rnn_dataframe.pkl\n","100%|██████████| 3.26M/3.26M [00:00<00:00, 166MB/s]\n"]}],"source":["data_fn = './rnn_dataframe.pkl'\n","if not os.path.isfile(data_fn):\n","  download_id = '1JJGyHi4w4kFUQumxAyixc2zHJfBR0LXU'\n","  gdown.download(id=download_id, output=data_fn, quiet=False)\n","\n","data = pd.read_pickle('rnn_dataframe.pkl')"]},{"cell_type":"markdown","metadata":{"id":"EqJFbZUYZmgf"},"source":["# Normalize Data"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"a6j6PR47Znv6","executionInfo":{"status":"ok","timestamp":1668812526687,"user_tz":360,"elapsed":385,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"}}},"outputs":[],"source":["# Normalize each feature except area_name (first column) and unemployment_rate (last column).\n","# area_name is a string and unemployment_rate is already normalized, being a ratio of type part/whole\n","data_normalized = data.copy()\n","features = np.array(data.columns)\n","for feature in features[1:-2]:\n","  for i in range(len(data[feature])):\n","    value_array = np.array(data[feature][i])\n","    # Some area_names have constant values for some features, which results in a divide by zero.\n","    if (max(value_array)-min(value_array)) == 0:\n","      # If this constant value is not zero, divide by it to normalize to 1.\n","      if value_array[0] != 0:\n","        data_normalized[feature][i] = value_array / value_array[0]\n","      continue\n","    # Normalize value_array to a 0-1 range\n","    normalized_array = (value_array-np.min(value_array)) / (np.max(value_array)-np.min(value_array))\n","    data_normalized[feature][i] = normalized_array\n","\n","#print(data.head())\n","#print(data_normalized.head())"]},{"cell_type":"markdown","metadata":{"id":"lhURO3foDJDT"},"source":["# Upload Data"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"xyQqWqRJDKPy","executionInfo":{"status":"ok","timestamp":1668812526688,"user_tz":360,"elapsed":5,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"}}},"outputs":[],"source":["#upload_id = '1ykTBLpI89LWQwvPExl_9JfpOoYXHkSN8'\n","#auth.authenticate_user()\n","#!gupload --to upload_id pickled_dataframe_zip.pkl"]},{"cell_type":"markdown","metadata":{"id":"AgXAleV8DVrY"},"source":["# Define Linear Regression Model"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"12kUaTrXDXjy","executionInfo":{"status":"ok","timestamp":1668812533624,"user_tz":360,"elapsed":99,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"}}},"outputs":[],"source":["\"\"\"\n","Define LinearRegression class (__init__() and forward())\n","\"\"\"\n","class LinearRegression(torch.nn.Module):\n","  def __init__(self):\n","    super(LinearRegression, self).__init__()\n","    self.linear = torch.nn.Linear(1, 1)\n","\n","  def forward(self, x):\n","    pred_y = self.linear(x)\n","    return pred_y"]},{"cell_type":"markdown","source":["# Attempt to download and load saved models"],"metadata":{"id":"ANKIq2CrqvCO"}},{"cell_type":"code","source":["models = []\n","for i in range(len(data_normalized['area_name'])):\n","  path = './linear_regression_models/lr_model_' + data_normalized['area_name'][i] + '.pkl'\n","  if not os.path.isfile(data_fn):\n","    download_id = '1phlphTRG5P4XUtLxJvh-d_2YE58XK7jR'\n","    gdown.download(id=download_id, output=path, quiet=False)\n","\n","  model = LinearRegression()\n","  model.load_state_dict(torch.load(path))\n","  model.eval()\n","\n","  if models == []:\n","    models = [model]\n","  else:\n","    models.append(model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":395},"id":"PBjA126oqyl6","executionInfo":{"status":"error","timestamp":1668708520845,"user_tz":360,"elapsed":382,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"}},"outputId":"63b5a1d1-5d39-46d3-cd2c-68284683a4cb"},"execution_count":8,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-fb8d7d4b882d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m   \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLinearRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m   \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_state_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m   \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(f, map_location, pickle_module, **pickle_load_args)\u001b[0m\n\u001b[1;32m    697\u001b[0m         \u001b[0mpickle_load_args\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'encoding'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    698\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 699\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0m_open_file_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mopened_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    700\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0m_is_zipfile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopened_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    701\u001b[0m             \u001b[0;31m# The zipfile reader is going to advance the current file position.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36m_open_file_like\u001b[0;34m(name_or_buffer, mode)\u001b[0m\n\u001b[1;32m    228\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_open_file_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    229\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_is_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 230\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_open_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    231\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'w'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode)\u001b[0m\n\u001b[1;32m    209\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0m_open_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_opener\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_open_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__exit__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: './linear_regression_models/lr_model_California.pkl'"]}]},{"cell_type":"markdown","metadata":{"id":"hvrirdi6DdSf"},"source":["# Initialize Linear Regression Parameters and Models"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"krPuKdenDfF3","executionInfo":{"status":"ok","timestamp":1668813622058,"user_tz":360,"elapsed":473,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"}}},"outputs":[],"source":["epochs = 50\n","validation_tests = 10\n","learning_rate = 0.001\n","\n","# Unique model, criterion, and optimizer for each 'area_name'\n","models = [LinearRegression()]\n","criterions = [torch.nn.MSELoss()]\n","SGD_optimizers = [torch.optim.SGD(models[0].parameters(), lr=learning_rate)]\n","losses = [[]]\n","validation_losses = [[]]\n","for i in range(1, len(data_normalized['area_name'])):\n","  models.append(LinearRegression())\n","  criterions.append(torch.nn.MSELoss())\n","  SGD_optimizers.append(torch.optim.SGD(models[i].parameters(), lr=learning_rate))\n","  losses.append([])\n","  validation_losses.append([])"]},{"cell_type":"markdown","metadata":{"id":"PpCHgBcMDgjw"},"source":["# Train Linear Regression Models"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":140912,"status":"ok","timestamp":1668813764768,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"},"user_tz":360},"id":"sQ0KZ6OODiIL","outputId":"41b5262d-bf61-4542-9eb7-5411898969b2"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1020/1020 [02:20<00:00,  7.25it/s]\n"]}],"source":["\"\"\"\n","Train each area_name's LinearRegression model for some epochs on the first P% of data_normalized\n","\"\"\"\n","P_train = 0.5 # First 50% of data is for training\n","P_validation = 0.3\n","for i in tqdm(range(len(data_normalized['area_name']))):\n","  # Calculate cutoff index between train and validation data and between validation and test data, then extract train_x, train_y, validation_x, and validation_y for this model\n","  train_validation_thresh = int(len(data_normalized['labor_force'][i]) * P_train)\n","  validation_test_thresh = train_validation_thresh + int(len(data_normalized['labor_force'][i]) * P_validation)\n","\n","  train_x = torch.tensor(data_normalized['labor_force'][i][0:train_validation_thresh]).unsqueeze(0).permute(1, 0)\n","  train_y = torch.tensor(data_normalized['unemployment_rate'][i][0:train_validation_thresh]).unsqueeze(0).permute(1, 0)\n","\n","  validation_x = torch.tensor(data_normalized['labor_force'][i][train_validation_thresh:validation_test_thresh]).unsqueeze(0).permute(1, 0)\n","  validation_y = torch.tensor(data_normalized['unemployment_rate'][i][train_validation_thresh:validation_test_thresh]).unsqueeze(0).permute(1, 0)\n","\n","  for j in range(validation_tests):\n","    # Train this model for some epochs\n","    for epoch in range(epochs):\n","      pred_y = models[i](train_x.to(torch.float))\n","\n","      loss = criterions[i](pred_y.to(torch.float), train_y.to(torch.float))\n","      SGD_optimizers[i].zero_grad()\n","\n","      loss.backward()\n","      SGD_optimizers[i].step()\n","      losses[i].append(loss.item())\n","    \n","    validation_pred_y = models[i](validation_x.to(torch.float))\n","    validation_loss = criterions[i](validation_pred_y.to(torch.float), validation_y.to(torch.float))\n","    validation_losses[i].append(validation_loss.item())"]},{"cell_type":"markdown","metadata":{"id":"jtpJHLPoDjv1"},"source":["# Test Linear Regression Models"]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":292,"status":"ok","timestamp":1668813774048,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"},"user_tz":360},"id":"5c9lkmihDlV1","outputId":"ff29aacf-d84d-4499-eda4-8076df7980d1"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1020/1020 [00:00<00:00, 6527.64it/s]"]},{"output_type":"stream","name":"stdout","text":["[0.23754297196865082, 0.1576692909002304, 0.19284091889858246, 0.010830332525074482, 0.0043848492205142975, 0.002160947769880295, 0.027921004220843315, 0.047223471105098724, 0.00996899139136076, 0.21441270411014557, 0.06374603509902954, 0.02845589444041252, 0.030202452093362808, 0.07958977669477463, 0.054073888808488846, 0.12350805848836899, 0.058538768440485, 0.15050384402275085, 0.00555693032220006, 0.24923422932624817, 0.03683296963572502, 0.026313690468668938, 0.09683854132890701, 0.02129480056464672, 0.024665232747793198, 0.28829360008239746, 0.06778107583522797, 0.009426433593034744, 0.0044812289997935295, 0.003477279329672456, 0.028481703251600266, 0.10247988998889923, 0.043044764548540115, 0.005826334003359079, 0.04528326168656349, 0.019412042573094368, 0.03044164925813675, 0.02426210232079029, 0.011554586701095104, 0.030328912660479546, 0.05356293171644211, 0.004812013357877731, 0.26051005721092224, 0.27384501695632935, 0.253548264503479, 0.08692171424627304, 0.01387306209653616, 0.04213527962565422, 0.058191798627376556, 0.008632563054561615, 0.023393109440803528, 0.04602569714188576, 0.35117602348327637, 0.08379286527633667, 0.038117945194244385, 0.019404800608754158, 0.009768015705049038, 0.005669706966727972, 0.15067502856254578, 0.0658307820558548, 0.09227142482995987, 0.21269604563713074, 0.3868905007839203, 0.02742992714047432, 0.03719213604927063, 0.04556391388177872, 0.0019867215305566788, 0.12153304368257523, 0.025683147832751274, 0.14533501863479614, 0.021711811423301697, 0.0539143942296505, 0.02708304114639759, 0.001641305279918015, 0.0535443089902401, 0.014457507990300655, 0.09512829035520554, 0.0018263377714902163, 0.09490465372800827, 0.01812787726521492, 0.029159778729081154, 0.13975560665130615, 0.06557578593492508, 0.07350488752126694, 0.04674611985683441, 0.09772319346666336, 0.029152754694223404, 0.02211490087211132, 0.0006840815767645836, 0.12329700589179993, 0.07719604671001434, 0.006288409698754549, 0.06489720195531845, 0.04930996894836426, 0.05083978548645973, 0.018489206209778786, 0.12619425356388092, 0.006697296164929867, 0.02634953148663044, 0.04288560152053833, 0.1643374115228653, 0.017575662583112717, 0.17066654562950134, 0.011632300913333893, 0.01719898357987404, 0.07370900362730026, 0.09210042655467987, 0.1491628885269165, 0.20036433637142181, 0.8925005197525024, 0.0004523565585259348, 0.10486219078302383, 0.058290306478738785, 0.0157165564596653, 0.12766829133033752, 0.02515348605811596, 0.06222216784954071, 0.07991586625576019, 0.035106074064970016, 0.027173172682523727, 0.08890418708324432, 0.21258515119552612, 0.0010878702159970999, 0.08940881490707397, 0.19166436791419983, 0.07288306951522827, 0.42812150716781616, 0.01456556934863329, 0.1473473161458969, 0.03635895997285843, 0.02007242850959301, 0.0874352902173996, 0.043813902884721756, 0.08081337809562683, 0.022438693791627884, 0.02930235117673874, 0.1760484278202057, 0.06099854037165642, 0.19146575033664703, 0.007104142569005489, 0.33952805399894714, 0.03790499269962311, 0.5640001893043518, 0.0459352508187294, 0.09675630927085876, 0.0907849371433258, 0.049168653786182404, 0.0037918363232165575, 0.054686177521944046, 0.05734109506011009, 0.006551388651132584, 0.01702987588942051, 0.2873317003250122, 0.018129797652363777, 0.07301372289657593, 0.11489874869585037, 0.01140346098691225, 0.37303873896598816, 0.05495172739028931, 0.0017478191293776035, 0.07041511684656143, 0.010169765911996365, 0.11954930424690247, 0.0627557709813118, 0.025980396196246147, 0.006826348137110472, 0.388130247592926, 0.1061573177576065, 0.13840505480766296, 0.3466191291809082, 0.3483494222164154, 0.13474836945533752, 0.07691888511180878, 0.08216509222984314, 0.4309825301170349, 0.04486094042658806, 0.004438450094312429, 0.08748022466897964, 0.11576133221387863, 0.005308549851179123, 0.09991844743490219, 0.0027587704826146364, 0.03677107393741608, 0.04914075881242752, 0.003894633846357465, 0.09940315783023834, 0.0016186241991817951, 0.05468639358878136, 0.1083206832408905, 0.06714141368865967, 0.0044017876498401165, 0.13272641599178314, 0.013742450624704361, 0.016414079815149307, 0.08872934430837631, 0.012968556955456734, 0.03801840543746948, 0.022819263860583305, 0.5292426943778992, 0.08323878049850464, 0.00183204747736454, 0.7018257975578308, 0.012540056370198727, 0.17226383090019226, 0.0818239226937294, 0.08390620350837708, 0.007817014120519161, 0.0779758021235466, 0.057539232075214386, 0.04500802978873253, 0.0621764101088047, 0.05088743194937706, 0.10723608732223511, 0.07103089988231659, 0.015880275517702103, 0.018529623746871948, 0.005543502978980541, 0.21544001996517181, 0.2844145894050598, 0.0035034469328820705, 0.1213630735874176, 0.1896420270204544, 0.3695439100265503, 0.00639874255284667, 0.0733819529414177, 0.02579493820667267, 0.0028194873593747616, 0.009279828518629074, 0.07936885952949524, 0.10292096436023712, 0.19350957870483398, 0.07612484693527222, 0.4929289221763611, 0.06868712604045868, 0.19557981193065643, 0.17657168209552765, 0.005091761704534292, 0.7794278860092163, 0.0343160554766655, 0.05168869346380234, 0.0845569521188736, 0.009604102931916714, 0.03906511887907982, 0.09233497828245163, 0.0009806067682802677, 0.018351946026086807, 0.10007470846176147, 0.1073366329073906, 0.029021896421909332, 0.4225102961063385, 0.042598675936460495, 0.12485048919916153, 0.3608646094799042, 0.0017941843252629042, 0.016834191977977753, 0.14252209663391113, 0.022416651248931885, 0.02506384067237377, 0.03305065631866455, 0.002949459245428443, 0.10377787798643112, 0.17088094353675842, 0.020693760365247726, 0.06043071299791336, 0.15951427817344666, 0.008628451265394688, 0.0033248253166675568, 0.07295142114162445, 0.005039764568209648, 0.03282131627202034, 0.0016009437385946512, 0.05617056041955948, 0.011027093976736069, 0.006924335844814777, 0.1122809424996376, 0.0742921456694603, 0.04433854669332504, 0.007182746659964323, 0.2060849517583847, 0.12005282938480377, 0.02592572197318077, 0.040654007345438004, 0.03941086679697037, 0.006617653649300337, 0.13152404129505157, 0.04554923623800278, 0.08679850399494171, 0.03060213103890419, 0.02313627116382122, 0.05791347101330757, 0.01361631415784359, 0.08639483898878098, 0.004226590506732464, 0.01464490033686161, 0.013661281205713749, 0.08881732076406479, 0.08208543062210083, 0.24047517776489258, 0.01488390751183033, 0.0316779799759388, 0.002734896494075656, 0.09268942475318909, 0.018005644902586937, 0.018537666648626328, 0.09296321868896484, 0.2018306702375412, 0.005041312891989946, 0.011897324584424496, 0.009911736473441124, 0.10466579347848892, 0.010486150160431862, 0.0023225678596645594, 0.02626531384885311, 0.1155276894569397, 0.256374329328537, 0.2141013741493225, 0.07845944166183472, 0.22658513486385345, 0.05187750980257988, 0.02242117002606392, 0.0576506182551384, 0.0481506772339344, 0.020186537876725197, 0.12632347643375397, 0.050877101719379425, 0.0015400052070617676, 0.009813884273171425, 0.002674727002158761, 0.0162925086915493, 0.010520699433982372, 0.13145583868026733, 0.11213616281747818, 0.3740449547767639, 0.03275282680988312, 0.18534895777702332, 0.877061128616333, 0.44141754508018494, 0.0049387733452022076, 0.01528228260576725, 0.11657211929559708, 0.1933472901582718, 0.2175455391407013, 0.02708343043923378, 0.18554963171482086, 0.18518763780593872, 0.31700193881988525, 0.14218705892562866, 0.3501938283443451, 0.2755611836910248, 0.002682998776435852, 0.002572801662608981, 0.009349504485726357, 0.02874067984521389, 0.05819646641612053, 0.01042985264211893, 0.019639084115624428, 0.033723000437021255, 0.04264873266220093, 0.07832005620002747, 0.019438033923506737, 0.31478601694107056, 0.05847807601094246, 0.07544807344675064, 0.12641900777816772, 0.19804248213768005, 0.08975645154714584, 0.05116397514939308, 0.11923780292272568, 0.15134546160697937, 0.0093719232827425, 0.007433128077536821, 0.0214616060256958, 0.010572931729257107, 0.79753178358078, 0.005464514251798391, 0.02946004457771778, 0.03304852545261383, 0.19221608340740204, 0.011368363164365292, 0.34179431200027466, 0.009027471765875816, 0.057835642248392105, 0.4262288808822632, 0.13870321214199066, 0.6675575375556946, 0.007328296545892954, 0.004127816297113895, 0.08058454096317291, 0.17804135382175446, 0.030009249225258827, 0.0019826767966151237, 0.0009585415245965123, 0.032469604164361954, 0.017114879563450813, 0.0035686539486050606, 0.03781716898083687, 0.11127671599388123, 0.055696841329336166, 0.1472604125738144, 0.005963262636214495, 0.008989985100924969, 0.06339451670646667, 0.016094857826828957, 0.08787670731544495, 0.0025756070390343666, 0.18018345534801483, 0.06230239197611809, 0.5602728724479675, 0.27080589532852173, 0.00718322629109025, 0.015311835333704948, 0.14987796545028687, 0.3301927149295807, 0.0017519991379231215, 0.02059299312531948, 0.05137108638882637, 0.2498733550310135, 0.007760528475046158, 0.0944637656211853, 0.0735439881682396, 0.1022195890545845, 0.5742627382278442, 0.08496780693531036, 0.03245409205555916, 0.03950308635830879, 0.07943645864725113, 0.017786357551813126, 0.011334194801747799, 0.012508257292211056, 0.024571623653173447, 0.1386565864086151, 0.0456637442111969, 0.0322287380695343, 0.03556578606367111, 0.0007878190372139215, 0.04261448234319687, 0.19042573869228363, 0.00526383938267827, 0.060601308941841125, 0.030485110357403755, 0.019505862146615982, 0.35706037282943726, 0.25982844829559326, 0.052257608622312546, 0.28008854389190674, 0.1545322835445404, 0.019055167213082314, 0.02086993120610714, 0.11117291450500488, 0.30337074398994446, 0.0801066979765892, 0.11834002286195755, 0.03583328798413277, 0.059402164071798325, 0.04172096028923988, 0.005766867194324732, 0.19568438827991486, 0.2323758900165558, 0.0186152383685112, 0.07079994678497314, 0.008042349480092525, 0.004339195787906647, 0.002154749119654298, 0.35112708806991577, 0.3012242317199707, 0.009121895767748356, 0.006424434017390013, 0.07862164080142975, 0.0781184583902359, 0.1619330197572708, 0.031629182398319244, 0.16565710306167603, 0.09121165424585342, 0.07880797237157822, 0.05678320676088333, 0.02565501444041729, 0.01944434456527233, 0.0010017408058047295, 0.012422661297023296, 0.005785007495433092, 0.05286318063735962, 0.002190335188060999, 0.04717124626040459, 0.31123480200767517, 0.06121986359357834, 0.1459088772535324, 0.04480209946632385, 0.15089932084083557, 0.3220936059951782, 0.05886343866586685, 0.12458392232656479, 0.03212979435920715, 0.01723027043044567, 0.09420523047447205, 0.052486758679151535, 0.058980002999305725, 0.001378556014969945, 0.02722146362066269, 0.011856326833367348, 0.00855528935790062, 0.20454338192939758, 0.48544538021087646, 0.08510395139455795, 0.06296428292989731, 0.018573908135294914, 0.0076066553592681885, 0.004347825422883034, 0.022775735706090927, 0.201009139418602, 0.03489542379975319, 0.3054981231689453, 0.006282259710133076, 0.04945341870188713, 0.015722574666142464, 0.04864107817411423, 0.06671884655952454, 0.03635355457663536, 0.10937844961881638, 0.09198906272649765, 0.09392829984426498, 0.10146039724349976, 0.03014582395553589, 0.13393652439117432, 0.05819841846823692, 0.28060728311538696, 0.06353124976158142, 0.11018899828195572, 0.10849309712648392, 0.008066895417869091, 0.01280494499951601, 0.09535684436559677, 0.057362399995326996, 0.008652410469949245, 0.002831458579748869, 0.21126055717468262, 0.04865717515349388, 0.02493882179260254, 0.025342123582959175, 0.07121537625789642, 0.4329138994216919, 0.11578739434480667, 0.16236644983291626, 0.03632354736328125, 0.206150621175766, 0.2920228838920593, 0.13571207225322723, 0.08807118237018585, 0.0020237609278410673, 0.0022779256105422974, 0.045799318701028824, 0.39020830392837524, 0.24290503561496735, 0.06183132156729698, 0.0009123773197643459, 0.010070031508803368, 0.10018283128738403, 0.026182062923908234, 0.026221735402941704, 0.025268761441111565, 0.073516346514225, 0.013676386326551437, 0.12468121200799942, 0.24560095369815826, 0.0984184741973877, 0.015048563480377197, 0.6975210905075073, 0.008991098962724209, 0.07411199063062668, 0.07756523787975311, 0.007129401434212923, 0.009203200228512287, 0.5356759428977966, 0.008847792632877827, 0.044707708060741425, 0.13357266783714294, 0.07319051772356033, 0.05862557142972946, 0.2163764089345932, 0.016447309404611588, 0.02426408790051937, 0.05146034434437752, 0.00865764170885086, 0.04122098162770271, 0.19367715716362, 0.035001881420612335, 0.02703084796667099, 0.0029710836242884398, 0.03789946064352989, 0.16439375281333923, 0.006116654723882675, 0.003879976226016879, 0.1039847582578659, 0.07552195340394974, 0.0388096421957016, 0.011976526118814945, 0.08133304864168167, 0.22120405733585358, 0.18064101040363312, 0.018306484445929527, 0.5104531049728394, 0.0399043895304203, 0.06530315428972244, 0.1267814040184021, 0.05419381707906723, 0.0688525140285492, 0.0665498822927475, 0.04560323804616928, 0.023131422698497772, 0.09242545068264008, 0.01395178772509098, 0.00537811079993844, 0.01174812763929367, 0.09553426504135132, 0.027487169951200485, 0.019759725779294968, 0.18208009004592896, 0.1004088893532753, 0.01064930111169815, 0.03896006569266319, 0.1375945657491684, 0.09689748287200928, 0.06420604884624481, 0.06971817463636398, 0.012900181114673615, 0.23734620213508606, 0.1297433078289032, 0.02725067362189293, 0.08016196638345718, 0.18693190813064575, 0.040487777441740036, 0.051669590175151825, 0.012505615130066872, 0.07625771313905716, 0.08379489928483963, 0.038516491651535034, 0.13868694007396698, 0.022689426317811012, 0.15731459856033325, 0.09770804643630981, 0.0649193525314331, 0.04594738781452179, 0.09056854993104935, 0.03593076020479202, 0.00812626350671053, 0.2629958391189575, 0.0030579313170164824, 0.16405557096004486, 0.0005788495764136314, 0.19901934266090393, 0.023481108248233795, 0.09844882041215897, 0.12098567187786102, 0.011052584275603294, 0.11280930042266846, 0.08124734461307526, 0.003848400665447116, 0.019765343517065048, 0.03818338364362717, 0.0625062808394432, 0.03940529748797417, 0.01731707900762558, 0.032820217311382294, 0.20289580523967743, 0.0017765468219295144, 0.1557733416557312, 0.04904694855213165, 0.07921723276376724, 0.06825858354568481, 0.0013462873175740242, 0.04134334251284599, 0.037578776478767395, 0.06585749238729477, 0.003924519754946232, 0.07473663240671158, 0.5189073085784912, 0.12787973880767822, 0.0556504987180233, 0.20125053822994232, 0.015534311532974243, 0.18070217967033386, 0.20539529621601105, 0.028668973594903946, 0.0018830833723768592, 0.13787534832954407, 0.10977225750684738, 0.06791787594556808, 0.020854800939559937, 0.09815746545791626, 0.1277802735567093, 0.07657407224178314, 0.0012323603732511401, 0.296450138092041, 0.5200788974761963, 0.07743184268474579, 0.024539392441511154, 0.2888183295726776, 0.06048545613884926, 0.08977936208248138, 0.045399948954582214, 0.12148215621709824, 0.007886067032814026, 0.0007080301293171942, 0.003482050495222211, 0.11272723972797394, 0.13226383924484253, 0.013870969414710999, 0.035537999123334885, 0.013488980010151863, 0.0037989881820976734, 0.2250194549560547, 0.18334069848060608, 0.054337527602910995, 0.04053603485226631, 0.011005492880940437, 0.04800587147474289, 0.0185689739882946, 0.035962119698524475, 0.017689868807792664, 0.0512334406375885, 0.0032858126796782017, 0.006453980226069689, 0.02555202879011631, 0.05601763725280762, 0.23870843648910522, 0.014164543710649014, 0.03921959176659584, 0.0015799084212630987, 0.1305686980485916, 0.15327617526054382, 0.03426586464047432, 0.005653378088027239, 0.24583600461483002, 0.11788821965456009, 0.20545868575572968, 0.0015493500977754593, 0.07145515829324722, 0.16123917698860168, 0.004953011870384216, 0.045418158173561096, 0.0012787145096808672, 0.03828951343894005, 0.001955054234713316, 0.00960365030914545, 0.025946350768208504, 0.06418835371732712, 0.026358632370829582, 0.02633877843618393, 0.23299044370651245, 0.039608098566532135, 0.3471999764442444, 0.10900210589170456, 0.09551448374986649, 0.025426160544157028, 0.5497378706932068, 0.02048664540052414, 0.03049386478960514, 0.26221564412117004, 0.006182447075843811, 0.00233889976516366, 0.0037275170907378197, 0.04202508181333542, 0.1446799635887146, 0.02732611633837223, 0.08635859936475754, 0.006441816221922636, 0.06355801224708557, 0.024185631424188614, 0.08513027429580688, 0.0463709831237793, 0.0735890194773674, 0.14514724910259247, 0.11576923727989197, 0.12236177921295166, 0.022964967414736748, 0.009943119250237942, 0.12160883843898773, 0.126042902469635, 0.15242299437522888, 0.33256796002388, 0.04113086313009262, 0.00804569385945797, 0.0005485187284648418, 0.20980480313301086, 0.0028742393478751183, 0.1525329202413559, 0.01157441921532154, 0.011114879511296749, 0.0036737218033522367, 0.04790910333395004, 0.05043706297874451, 0.21731658279895782, 0.006692785769701004, 0.3261902630329132, 0.04542362317442894, 0.030789516866207123, 0.020202629268169403, 0.038902658969163895, 0.11830104142427444, 0.012449825182557106, 0.016256418079137802, 0.0847562849521637, 0.0538666769862175, 0.01595352590084076, 0.057056721299886703, 0.021180691197514534, 0.002497648587450385, 0.026079369708895683, 0.004996966104954481, 0.4551803767681122, 0.15215951204299927, 0.030621223151683807, 0.3025319576263428, 0.10272485017776489, 0.0010321608278900385, 0.03689919784665108, 0.08782383799552917, 0.04641180485486984, 0.004877146333456039, 0.06711231917142868, 0.27072176337242126, 0.33692994713783264, 0.04232998564839363, 0.04000140726566315, 0.021624350920319557, 0.08469878882169724, 0.08046511560678482, 0.3494957983493805, 0.44265833497047424, 0.07381311058998108, 0.17230309545993805, 0.08038520812988281, 0.008000088855624199, 0.016373954713344574, 0.3533955514431, 0.1570134460926056, 0.024983225390315056, 0.3250454068183899, 0.02825785242021084, 0.030702438205480576, 0.3151405155658722, 0.3626551628112793, 0.04873572662472725, 0.089675173163414, 0.02827334590256214, 0.06321972608566284, 0.01704486832022667, 0.07181720435619354, 0.1322324275970459, 0.002305222675204277, 0.1471245139837265, 0.1317300796508789, 0.04653492197394371, 0.01574571803212166, 0.18042528629302979, 0.05970533937215805, 0.37155529856681824, 0.0007893616566434503, 0.0010990293230861425, 0.1067226380109787, 0.153159961104393, 0.00025652273325249553, 0.07122913002967834, 0.01562785916030407, 0.05105394497513771, 0.009997114539146423, 0.050342388451099396, 0.2699738144874573, 0.01658034883439541, 0.04326507821679115, 0.018809296190738678, 0.10497500002384186, 0.005024433135986328, 0.03652007132768631, 0.11572470515966415, 0.03008219413459301, 0.047184500843286514, 0.04799425229430199, 0.6054157018661499, 0.3600897789001465, 0.03994099795818329, 0.011143495328724384, 0.05166199058294296, 0.0921390950679779, 0.15720149874687195, 0.008828889578580856, 0.11815430223941803, 0.08956444263458252, 0.02596362493932247, 0.024882234632968903, 0.06820867955684662, 0.01352668832987547, 0.0004608813615050167, 0.04977349936962128, 0.35960298776626587, 0.09826020896434784, 0.09334025532007217, 0.05604488402605057, 0.32008907198905945, 0.04097451642155647, 0.033084623515605927, 0.016033826395869255, 0.12464223802089691, 0.005698220804333687, 0.04599926620721817, 0.01789483055472374, 0.17012152075767517, 0.11560121178627014, 0.07134389877319336, 0.11937572062015533, 0.12783928215503693, 0.19365240633487701, 0.029398726299405098, 0.2970767617225647, 0.032767996191978455, 0.06640328466892242, 0.11121056973934174, 0.002504049800336361, 0.022773701697587967, 0.05634724721312523, 0.0933346301317215, 0.009966601617634296, 0.01846117153763771, 0.16660214960575104, 0.011248564347624779, 0.2503220736980438, 0.051954787224531174, 0.011061484925448895, 0.054448701441287994, 0.17426657676696777, 0.10623154044151306, 0.07874784618616104, 0.004600260406732559, 0.026406344026327133, 0.025532424449920654, 0.009279544465243816, 0.06044081225991249, 0.05482737720012665, 0.045255303382873535, 0.0391804575920105, 0.049826670438051224, 0.21090629696846008, 0.07527457922697067, 0.11100459843873978, 0.002104694489389658, 0.0035380932968109846, 0.03408772870898247, 0.007950869388878345, 0.005036479327827692, 0.5259914398193359, 0.1492086946964264, 0.014322808012366295, 0.0037937702145427465, 0.3689115047454834, 0.005227057263255119, 0.01201985776424408, 0.49427318572998047, 0.007050635758787394, 0.09281394630670547, 0.012730642221868038, 0.15678881108760834, 0.304293155670166, 1.0536572933197021, 0.19236700236797333, 0.06852427124977112, 0.030897123739123344, 0.005119590554386377, 0.002846150891855359, 0.1884361356496811, 0.05378412455320358, 0.014393695630133152, 0.0025073622819036245, 0.027130229398608208, 0.0036678938195109367, 0.024605967104434967, 0.006084487773478031, 0.002567614195868373, 0.08891887217760086, 0.0954333171248436, 0.08288537710905075, 0.2198489010334015, 0.03314373642206192, 0.14505720138549805, 0.32146674394607544, 0.04201433062553406, 0.13684970140457153, 0.08914922922849655, 0.0022793379612267017, 0.022088022902607918, 0.2476288229227066, 0.04272673279047012, 0.2130473554134369, 0.02841455116868019, 0.10498721152544022, 0.019275594502687454, 0.03257013112306595, 0.0020883174147456884, 0.030607881024479866, 0.0026834062300622463, 0.004133688285946846, 0.30770960450172424, 0.3198416531085968, 0.08331168442964554, 0.23709604144096375, 0.17073529958724976, 0.747482180595398, 0.012635070830583572, 0.12188506126403809, 0.001501697232015431, 0.010187556967139244, 0.02978295087814331, 0.09705992788076401, 0.04700903594493866, 0.008544246666133404, 0.06693883240222931, 0.018376534804701805, 0.031646858900785446, 0.01074622105807066, 0.014386842958629131, 0.17784470319747925, 0.2588779330253601]\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["\"\"\"\n","Test each area_name's LinearRegression model on the last P% of data_normalized\n","\"\"\"\n","test_losses = None\n","for i in tqdm(range(len(data_normalized['area_name']))):\n","  # Calculate cutoff index between train and test data, then extract test_x and test_y for this model\n","  test_x = torch.tensor(data_normalized['labor_force'][i][validation_test_thresh:]).unsqueeze(0).permute(1, 0)\n","  test_y = torch.tensor(data_normalized['unemployment_rate'][i][validation_test_thresh:]).unsqueeze(0).permute(1, 0)\n","\n","  # Predict test_y (unemployment_rate) based on test_x (labor_force) for this area_name\n","  pred_y = models[i](test_x.to(torch.float))\n","  loss = criterions[i](pred_y.to(torch.float), test_y.to(torch.float))\n","\n","  # Store loss\n","  if test_losses == None:\n","    test_losses = [loss.item()]\n","  else:\n","    test_losses.append(loss.item())\n","  \n","print(test_losses)"]},{"cell_type":"markdown","metadata":{"id":"gObjOX8_xDkd"},"source":["# Plot Losses"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":682},"executionInfo":{"elapsed":521,"status":"ok","timestamp":1668813829295,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"},"user_tz":360},"id":"n-XNZPhiQOvh","outputId":"2b3d4b5b-4c03-4deb-fadf-cba93df077c2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Average Starting Train MSE: 0.44611952407633676. Average Ending Train MSE: 0.04727741766709026\n","Average Test MSE: 0.0944673907256562\n","Average Test MSE / Average Ending Train MSE: 1.9981503937220075\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Average Starting Validation MSE: 0.3658461546676585. Average Ending Validation MSE: 0.07514522044042607\n","Average Test MSE: 0.0944673907256562\n","Average Test MSE / Average Ending Validation MSE: 1.2571310613234337\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["\"\"\"\n","Plot the average training loss value across all area_name models for each epoch.\n","Then add a point representing the average testing loss across all area_name models.\n","\"\"\"\n","average_train_losses = np.average(np.array(losses), axis=0)\n","average_test_loss = np.average(np.array(test_losses))\n","\n","train_loss_str = \"Average Starting Train MSE: \" + str(average_train_losses[0]) + \". Average Ending Train MSE: \" + str(average_train_losses[-1])\n","test_loss_str = \"Average Test MSE: \" + str(average_test_loss)\n","ratio_str = \"Average Test MSE / Average Ending Train MSE: \" + str(average_test_loss / average_train_losses[-1]) # Closer to 1 the better\n","print(train_loss_str)\n","print(test_loss_str)\n","print(ratio_str)\n","\n","plt.plot(average_train_losses, label='Average Train MSE')\n","plt.scatter(epochs * validation_tests, average_test_loss, color='black', label='Average Test MSE')\n","plt.title('MSE Training Loss Averaged Across All 1020 Models'), plt.xlabel('Epochs'), plt.ylabel('Average MSE')\n","plt.legend(loc=\"upper center\")\n","plt.show()\n","\n","\n","\n","\"\"\"\n","Plot the average validation loss value across all area_name models for each validation test.\n","Then add a point representing the average testing loss across all area_name models.\n","\"\"\"\n","\n","average_validation_losses = np.average(np.array(validation_losses), axis=0)\n","\n","validation_loss = \"Average Starting Validation MSE: \" + str(average_validation_losses[0]) + \". Average Ending Validation MSE: \" + str(average_validation_losses[-1])\n","test_loss_str = \"Average Test MSE: \" + str(average_test_loss)\n","ratio_str = \"Average Test MSE / Average Ending Validation MSE: \" + str(average_test_loss / average_validation_losses[-1]) # Closer to 1 the better\n","print(validation_loss)\n","print(test_loss_str)\n","print(ratio_str)\n","\n","plt.plot(average_validation_losses, label='Average Validation MSE')\n","plt.scatter(validation_tests, average_test_loss, color='black', label='Average Test MSE')\n","plt.title('MSE Validation Loss Averaged Across All 1020 Models'), plt.xlabel('Validation Test'), plt.ylabel('Average MSE')\n","plt.legend(loc=\"upper center\")\n","plt.show()\n"]},{"cell_type":"code","execution_count":27,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1WnmtJsP4DPirNershO8o_tqURMWfTGfl"},"executionInfo":{"elapsed":296369,"status":"ok","timestamp":1668711764207,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"},"user_tz":360},"id":"DFPrM9-yxFeP","outputId":"d0c73d8f-7112-4bab-b0b6-81ceb2f0a094"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["\"\"\"\n","Plot the actual test loss value for each area_name model for each epoch, and a point representing the test loss for each model\n","\"\"\"\n","\n","# for i in range(len(areas)):\n","i = 0\n","while i < len(data_normalized['area_name']):\n","    #ax = fig.add_subplot(102,10,i+1)\n","    fig = plt.figure(figsize=(50,5))\n","    for j in range(10):\n","      ax = fig.add_subplot(1,10,j+1)\n","      ax.plot(losses[i+j], label='MSE Train Loss')\n","      ax.scatter(epochs, test_losses[i], color='black', label='MSE Test Loss')\n","      title_str = \"MSE Loss for \" + str(data_normalized['area_name'][i+j])\n","      plt.title(title_str), plt.xlabel('Epochs'), plt.ylabel('Average MSE')\n","      plt.legend(loc=\"upper center\")\n","\n","    fig.tight_layout()\n","    plt.show()\n","    i += 10"]},{"cell_type":"code","source":["\"\"\"\n","Plot the actual validation loss value for each area_name model for each epoch, and a point representing the test loss for each model\n","\"\"\"\n","\n","# for i in range(len(areas)):\n","i = 0\n","while i < len(data_normalized['area_name']):\n","    #ax = fig.add_subplot(102,10,i+1)\n","    fig = plt.figure(figsize=(50,5))\n","    for j in range(10):\n","      ax = fig.add_subplot(1,10,j+1)\n","      ax.plot(validation_losses[i+j], label='MSE Validation Loss')\n","      ax.scatter(validation_tests, test_losses[i], color='black', label='MSE Test Loss')\n","      title_str = \"MSE Loss for \" + str(data_normalized['area_name'][i+j])\n","      plt.title(title_str), plt.xlabel('Epochs'), plt.ylabel('Average MSE')\n","      plt.legend(loc=\"upper center\")\n","\n","    fig.tight_layout()\n","    plt.show()\n","    i += 10"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1TbLlsZntzF48JdKIfbVG9gN9GuO1Y4KO"},"id":"-8UuQqVrDqiB","executionInfo":{"status":"ok","timestamp":1668814190238,"user_tz":360,"elapsed":247267,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"}},"outputId":"4939e878-63b6-4561-9df0-42e3a78bec21"},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["# Save Each Linear Regression Model"],"metadata":{"id":"groCh3v3rcyJ"}},{"cell_type":"code","source":["for i in range(len(data_normalized['area_name'])):\n","  fn = data_normalized['area_name'] + '.pth'\n","  #upload_id = '1ykTBLpI89LWQwvPExl_9JfpOoYXHkSN8'\n","  #auth.authenticate_user()\n","  #!gupload --to upload_id pickled_dataframe_zip.pkl\n","\n","  path = str('./linear_regression_models/lr_model_' + fn)\n","  #PATH = open(path, mode=\"wb\")\n","  torch.save(models[i].state_dict(), path) #PATH)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":414},"id":"5RcAf5o9rfjL","executionInfo":{"status":"error","timestamp":1668709857493,"user_tz":360,"elapsed":262,"user":{"displayName":"Nic Prate","userId":"18028565516553744018"}},"outputId":"1a18ba3b-a44f-46e2-81f9-89a579af4600"},"execution_count":20,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-71e0679ab460>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'./linear_regression_models/lr_model_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m   \u001b[0;31m#PATH = open(path, mode=\"wb\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m   \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#PATH)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(obj, f, pickle_module, pickle_protocol, _use_new_zipfile_serialization)\u001b[0m\n\u001b[1;32m    374\u001b[0m     \u001b[0m_check_dill_version\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpickle_module\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 376\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0m_open_file_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'wb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mopened_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    377\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0m_use_new_zipfile_serialization\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    378\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0m_open_zipfile_writer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopened_file\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mopened_zipfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36m_open_file_like\u001b[0;34m(name_or_buffer, mode)\u001b[0m\n\u001b[1;32m    228\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_open_file_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    229\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_is_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 230\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_open_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    231\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'w'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode)\u001b[0m\n\u001b[1;32m    209\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0m_open_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_opener\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_open_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__exit__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '0       ./linear_regression_models/lr_model_California...\\n1       ./linear_regression_models/lr_model_Los Angele...\\n2       ./linear_regression_models/lr_model_Los Angele...\\n3       ./linear_regression_models/lr_model_Alameda Co...\\n4       ./linear_regression_models/lr_model_Alpine Cou...\\n                              ...                        \\n1015    ./linear_regression_models/lr_model_Yountville...\\n1016    ./linear_regression_models/lr_model_Yreka city...\\n1017    ./linear_regression_models/lr_model_Yuba City ...\\n1018    ./linear_regression_models/lr_model_Yucaipa ci...\\n1019    ./linear_regression_models/lr_model_Yucca Vall...\\nName: area_name, Length: 1020, dtype: object'"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO5IISZK8ldunSO/I1c1Ukx"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}